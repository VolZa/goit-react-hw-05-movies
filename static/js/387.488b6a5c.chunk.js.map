{"version":3,"file":"static/js/387.488b6a5c.chunk.js","mappings":"yTAGMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,gCAMV,IAAMC,EAAc,mCAAG,WAAOC,GAAP,uFACNF,EAAAA,EAAAA,IAAA,oCAAuCD,EAAvC,iBAAuDG,IADjD,cACrBC,EADqB,yBAEpBA,EAAOC,MAFa,2CAAH,sDASdC,EAAc,mCAAG,WAAMC,GAAN,kFACtBC,EAAU,CACdC,OAAQ,CACNC,QAASV,IAHe,UAMLC,EAAAA,EAAAA,GAAM,UAAD,OAAWM,GAAMC,GANjB,uBAMpBH,EANoB,EAMpBA,KANoB,kBAOrBA,GAPqB,2CAAH,sDAYbM,EAAW,mCAAG,WAAOC,GAAP,uFACLX,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDY,IAD/C,cACpBR,EADoB,yBAEnBA,EAAOC,MAFY,2CAAH,sDAKXQ,EAAU,mCAAG,WAAMN,GAAN,uFACJN,EAAAA,EAAAA,IAAA,iBACTM,EADS,4BACaP,EADb,2BADI,cACnBI,EADmB,yBAIlBA,EAAOC,MAJW,2CAAH,sDAOXS,EAAO,mCAAG,WAAMP,GAAN,yFACAN,EAAAA,EAAAA,IAAA,iBACTM,EADS,4BACaP,EADb,oBADA,uBACdK,EADc,EACdA,KADc,kBAIdA,GAJc,2CAAH,qD,kKCvCPU,E,QAAUC,GAAAA,IAAH,8F,mBCkDpB,EA3CgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAsCJ,EAAAA,EAAAA,WAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,sGAEjBN,GAAa,GAFI,SAGSO,EAAAA,GAAeJ,GAHxB,gBAGTK,EAHS,EAGTA,QACRV,EAAWU,GACXR,GAAa,GALI,kDAOjBE,GAAe,GACfO,QAAQC,IAAR,MARiB,0DAAH,qDAWlBJ,GACD,GAAE,CAACH,KAGF,UAACT,EAAD,WACGK,IAAa,SAACY,EAAA,EAAD,IACbV,IAAe,uBAAIW,EAAAA,KACpB,qCACA,wBACKf,EAAQgB,OACHhB,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACV,2BACE,uBAAID,KACJ,uBAAIC,MAFGD,EADC,KAOZ,uEAKf,C,uDCnDM,IAAMH,EAAYK,OAAOC,OAAO,CACpCC,MAAO,6CACPC,IAAK,gD","sources":["api.js","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","constants/constants.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '63646d6cb2d06c3444ba8e63d051cd70';\n\naxios.defaults.baseURL = BASE_URL;\n\n//популярні фільми\nexport const searchTrending = async (page) => {\n   const result = await axios.get(`/trending/all/day?api_key=${API_KEY}&page=${page}`);\n   return result.data;\n };\n\n export const searchById = async id => {\n  const result = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return result.data;\n};\nexport const fetchMovieById = async id => {\n  const options = {\n    params: {\n      api_key: API_KEY,\n    },\n  };\n  const { data } = await axios(`/movie/${id}`, options);\n  return data;\n};\n\n\n//отримання списку фільмів за запитом \n export const searchTitle = async (title) => {\n  const result = await axios.get(`/search/movie?api_key=${API_KEY}&query=${title}`);\n  return result.data;\n };\n\n export const getReviews = async id => {\n  const result = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return result.data;\n};\n\nexport const getCast = async id => {\n  const {data} = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\n//  trending/all/day?api_key=<<api_key>>\n// /trending/all/week?api_key=\n\n// {\n//    \"iso_3166_1\": \"UA\",\n//    \"english_name\": \"Ukraine\"\n//  },\n//  GET\n//  /configuration/languages\n//  {\n//    \"iso_639_1\": \"uk\",\n//    \"english_name\": \"Ukrainian\",\n//    \"name\": \"Український\"\n//  },\n\n//  https://api.themoviedb.org/3/configuration/timezones?api_key=<<api_key>>\n//  {\n//    \"iso_3166_1\": \"UA\",\n//    \"zones\": [\n//      \"Europe/Kiev\",\n//      \"Europe/Uzhgorod\",\n//      \"Europe/Zaporozhye\"\n//    ]\n//  },","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport * as API from '../../api';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { Wrapper } from './Reviews.styled';\nimport { ERROR_MSG } from 'constants/constants';\n\nconst Reviews = () => {\n  const [viewing, setViewing] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadError, setIsLoadError] = useState(false);\n  const { movieId } = useParams(); //ПОвертає об'єкт з усіма динамічними параметрами з поточного URL\n  \n  // let count = 0;\n  \n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await API.getReviews(movieId);\n        setViewing(results);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoadError(true);\n        console.log(error);\n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n      {isLoadError && <p>{ERROR_MSG}</p>}\n      <h2>Revievs</h2>\n      <ul>\n        {!!viewing.length ? (\n                viewing.map(({ author, content }) => (\n                  <li key={author}>\n                    <p>{author}</p>\n                    <p>{content}</p>\n                  </li>\n                ))\n              ) : (\n                <li>We don't have any review to this movie</li>\n              )}\n      </ul>\n    </Wrapper>\n  )\n}\nexport default Reviews;\n\n// {isLoading ? (<Loader/>)\n// :   isLoadError ? (\n//   <div>{ERROR_MSG['msg']}</div>)\n// : ( \n//     <ul>\n//     {\n//       viewing.map(item => (\n//       <li key={item.id}>\n//           <img\n//             src={\n//                   item.author_details.avatar_path\n//                   ? item.author_details.avatar_path.includes('http')\n//                       ? `https://picsum.photos/200/300?random=${(count += 1)}`\n//                       : `https://image.tmdb.org/t/p/original${item.author_details.avatar_path}`\n//                   : `https://picsum.photos/200/300?random=${(count += 1)}`\n//                 }\n//                 alt={item.author}\n//                 width=\"100\"\n//             />\n//           <p>\n//             <span>\n//                 {item.author ?? item.author_details.username ?? 'Author'}\n//             </span>\n//             <span>{item.content ?? 'No comments'}</span>\n//           </p>\n//       </li>\n//       )) \n//     }\n//     </ul>\n// )\n// }","export const ERROR_MSG = Object.freeze({\n   empty: 'This field is required and cannot be empty',\n   msg: 'Oops something going wrong! Try again later!',\n });\n "],"names":["API_KEY","axios","searchTrending","page","result","data","fetchMovieById","id","options","params","api_key","searchTitle","title","getReviews","getCast","Wrapper","styled","useState","viewing","setViewing","isLoading","setIsLoading","isLoadError","setIsLoadError","movieId","useParams","useEffect","fetchReviews","API","results","console","log","Loader","ERROR_MSG","length","map","author","content","Object","freeze","empty","msg"],"sourceRoot":""}
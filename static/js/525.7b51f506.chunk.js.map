{"version":3,"file":"static/js/525.7b51f506.chunk.js","mappings":"qTAGMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,+BAMV,IAAMC,EAAc,mCAAG,oGACND,EAAAA,EAAAA,IAAA,oCAAuCD,IADjC,cACrBG,EADqB,yBAEpBA,EAAOC,MAFa,2CAAH,qDAKbC,EAAU,mCAAG,WAAMC,GAAN,uFACJL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,oBAAkCN,IAD9B,cACnBG,EADmB,yBAElBA,EAAOC,MAFW,2CAAH,sDAMVG,EAAW,mCAAG,WAAOC,GAAP,uFACLP,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDQ,IAD/C,cACpBL,EADoB,yBAEnBA,EAAOC,MAFY,2CAAH,sDAKXK,EAAU,mCAAG,WAAMC,GAAN,uFACJT,EAAAA,EAAAA,IAAA,iBACTS,EADS,4BACkBV,EADlB,2BADI,cACnBG,EADmB,yBAIlBA,EAAOC,MAJW,2CAAH,sDAOXO,EAAO,mCAAG,WAAML,GAAN,yFACAL,EAAAA,EAAAA,IAAA,iBACTK,EADS,4BACaN,EADb,oBADA,uBACdI,EADc,EACdA,KADc,kBAIdA,GAJc,2CAAH,qD,0JC7BPQ,E,OAAUC,GAAAA,IAAH,8FCFPC,EAAYC,OAAOC,OAAO,CACpCC,MAAO,6CACPC,IAAK,iD,SCyCR,EAlCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAsCJ,EAAAA,EAAAA,WAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACQf,GAAYgB,EAAAA,EAAAA,MAAZhB,QAqBR,OAjBAiB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,sGAEjBL,GAAa,GAFI,SAGSM,EAAAA,GAAenB,GAHxB,gBAGToB,EAHS,EAGTA,QACRT,EAAWS,GACXP,GAAa,GALI,kDAOjBE,GAAe,GACfM,QAAQC,IAAR,MARiB,0DAAH,qDAWlBJ,GACD,GAAE,CAAClB,IAEHqB,QAAQC,IAAIZ,EAASE,EAAWE,IAG/B,UAACZ,EAAD,YACE,qCACCU,IAAa,SAACW,EAAA,EAAD,IACbT,IAAe,uBAAIV,KACpB,+CAGL,C","sources":["api.js","components/Reviews/Reviews.styled.jsx","constants/constants.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '63646d6cb2d06c3444ba8e63d051cd70';\n\naxios.defaults.baseURL = BASE_URL;\n\n//популярні фільми\nexport const searchTrending = async () => {\n   const result = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n   return result.data;\n };\n\n export const searchById = async id => {\n  const result = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return result.data;\n};\n\n//отримання списку фільмів за запитом \n export const searchTitle = async (title) => {\n  const result = await axios.get(`/search/movie?api_key=${API_KEY}&query=${title}`);\n  return result.data;\n };\n\n export const getReviews = async movieId => {\n  const result = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return result.data;\n};\n\nexport const getCast = async id => {\n  const {data} = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\n//  trending/all/day?api_key=<<api_key>>\n// /trending/all/week?api_key=\n\n// {\n//    \"iso_3166_1\": \"UA\",\n//    \"english_name\": \"Ukraine\"\n//  },\n//  GET\n//  /configuration/languages\n//  {\n//    \"iso_639_1\": \"uk\",\n//    \"english_name\": \"Ukrainian\",\n//    \"name\": \"Український\"\n//  },\n\n//  https://api.themoviedb.org/3/configuration/timezones?api_key=<<api_key>>\n//  {\n//    \"iso_3166_1\": \"UA\",\n//    \"zones\": [\n//      \"Europe/Kiev\",\n//      \"Europe/Uzhgorod\",\n//      \"Europe/Zaporozhye\"\n//    ]\n//  },","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;","export const ERROR_MSG = Object.freeze({\n   empty: 'This field is required and cannot be empty',\n   msg: 'Oops something going wrong! Try again later!',\n });","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport * as API from '../../api';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { Wrapper } from './Reviews.styled';\nimport { ERROR_MSG } from 'constants/constants';\n\nconst Reviews = () => {\n  const [viewing, setViewing] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadError, setIsLoadError] = useState(false);\n  const { movieId } = useParams(); //ПОвертає об'єкт з усіма динамічними параметрами з поточного URL\n  \n  // let count = 0;\n  \n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const { results } = await API.getReviews(movieId);\n        setViewing(results);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoadError(true);\n        console.log(error);\n      }\n    }\n    fetchReviews();\n  }, [movieId]);\n\n   console.log(viewing, isLoading, isLoadError);\n\n  return (\n    <Wrapper>\n      <div>Revievs</div>\n      {isLoading && <Loader />}\n      {isLoadError && <p>{ERROR_MSG}</p>}\n      <div>Rev Rev Revievs</div>\n    </Wrapper>\n  )\n}\nexport default Reviews;\n\n// {isLoading ? (<Loader/>)\n// :   isLoadError ? (\n//   <div>{ERROR_MSG['msg']}</div>)\n// : ( \n//     <ul>\n//     {\n//       viewing.map(item => (\n//       <li key={item.id}>\n//           <img\n//             src={\n//                   item.author_details.avatar_path\n//                   ? item.author_details.avatar_path.includes('http')\n//                       ? `https://picsum.photos/200/300?random=${(count += 1)}`\n//                       : `https://image.tmdb.org/t/p/original${item.author_details.avatar_path}`\n//                   : `https://picsum.photos/200/300?random=${(count += 1)}`\n//                 }\n//                 alt={item.author}\n//                 width=\"100\"\n//             />\n//           <p>\n//             <span>\n//                 {item.author ?? item.author_details.username ?? 'Author'}\n//             </span>\n//             <span>{item.content ?? 'No comments'}</span>\n//           </p>\n//       </li>\n//       )) \n//     }\n//     </ul>\n// )\n// }"],"names":["API_KEY","axios","searchTrending","result","data","searchById","id","searchTitle","title","getReviews","movieId","getCast","Wrapper","styled","ERROR_MSG","Object","freeze","empty","msg","useState","viewing","setViewing","isLoading","setIsLoading","isLoadError","setIsLoadError","useParams","useEffect","fetchReviews","API","results","console","log","Loader"],"sourceRoot":""}
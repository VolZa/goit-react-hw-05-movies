{"version":3,"file":"static/js/247.fe60458d.chunk.js","mappings":"yTAGMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,gCAMV,IAAMC,EAAc,mCAAG,WAAOC,GAAP,uFACNF,EAAAA,EAAAA,IAAA,oCAAuCD,EAAvC,iBAAuDG,IADjD,cACrBC,EADqB,yBAEpBA,EAAOC,MAFa,2CAAH,sDASdC,EAAc,mCAAG,WAAMC,GAAN,kFACtBC,EAAU,CACdC,OAAQ,CACNC,QAASV,IAHe,UAMLC,EAAAA,EAAAA,GAAM,UAAD,OAAWM,GAAMC,GANjB,uBAMpBH,EANoB,EAMpBA,KANoB,kBAOrBA,GAPqB,2CAAH,sDAYbM,EAAW,mCAAG,WAAOC,GAAP,uFACLX,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDY,IAD/C,cACpBR,EADoB,yBAEnBA,EAAOC,MAFY,2CAAH,sDAKXQ,EAAU,mCAAG,WAAMN,GAAN,uFACJN,EAAAA,EAAAA,IAAA,iBACTM,EADS,4BACaP,EADb,2BADI,cACnBI,EADmB,yBAIlBA,EAAOC,MAJW,2CAAH,sDAOXS,EAAO,mCAAG,WAAMP,GAAN,yFACAN,EAAAA,EAAAA,IAAA,iBACTM,EADS,4BACaP,EADb,oBADA,uBACdK,EADc,EACdA,KADc,kBAIdA,GAJc,2CAAH,qD,oICoBpB,UAvDa,WACV,OAAwBU,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACP,IAAMC,EAAK,mCAAG,WAAOlB,GAAP,uFAERc,GAAa,GAFL,SAGaK,EAAAA,GAAYnB,GAHzB,OAGFH,EAHE,OAIRa,EAAQb,EAAOY,MACfK,GAAa,GALL,gDAOLF,GAAS,GACTQ,QAAQT,MAAR,MARK,yDAAH,sDAWXO,EAAMH,EACR,GAAE,CAACA,KAGD,8BACIF,GAAc,SAAC,IAAD,IACXF,GACD,wBAAKU,EAAAA,EAAAA,OAEL,gCACG,kCACA,wBACMZ,EAAKa,OACLb,EAAKc,KAAI,WAA6CC,GAA7C,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,UAAhC,OACN,2BACG,gBAAKC,IAAKF,EAAY,yCACeA,GACnC,oDAAqDG,IAAKJ,KAC5D,wBAAKA,KACL,uBAAIE,MALEH,EADH,KASH,mDAY1B,C,uDC3DM,IAAMH,EAAYS,OAAOC,OAAO,CACpCC,MAAO,6CACPC,IAAK,gD","sources":["api.js","components/Cast/Cast.jsx","constants/constants.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '63646d6cb2d06c3444ba8e63d051cd70';\n\naxios.defaults.baseURL = BASE_URL;\n\n//популярні фільми\nexport const searchTrending = async (page) => {\n   const result = await axios.get(`/trending/all/day?api_key=${API_KEY}&page=${page}`);\n   return result.data;\n };\n\n export const searchById = async id => {\n  const result = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return result.data;\n};\nexport const fetchMovieById = async id => {\n  const options = {\n    params: {\n      api_key: API_KEY,\n    },\n  };\n  const { data } = await axios(`/movie/${id}`, options);\n  return data;\n};\n\n\n//отримання списку фільмів за запитом \n export const searchTitle = async (title) => {\n  const result = await axios.get(`/search/movie?api_key=${API_KEY}&query=${title}`);\n  return result.data;\n };\n\n export const getReviews = async id => {\n  const result = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return result.data;\n};\n\nexport const getCast = async id => {\n  const {data} = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\n//  trending/all/day?api_key=<<api_key>>\n// /trending/all/week?api_key=\n\n// {\n//    \"iso_3166_1\": \"UA\",\n//    \"english_name\": \"Ukraine\"\n//  },\n//  GET\n//  /configuration/languages\n//  {\n//    \"iso_639_1\": \"uk\",\n//    \"english_name\": \"Ukrainian\",\n//    \"name\": \"Український\"\n//  },\n\n//  https://api.themoviedb.org/3/configuration/timezones?api_key=<<api_key>>\n//  {\n//    \"iso_3166_1\": \"UA\",\n//    \"zones\": [\n//      \"Europe/Kiev\",\n//      \"Europe/Uzhgorod\",\n//      \"Europe/Zaporozhye\"\n//    ]\n//  },","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport * as API from '../../api';\nimport { Loader } from \"components/Loader/Loader\";\nimport { ERROR_MSG } from \"constants/constants\";\n\nconst Cast = () => {\n   const [cast, setCast] = useState([]);\n   const [error, setError] = useState(false);\n   const [isLoading, setIsLoading] = useState(false);\n\n   const { movieId } = useParams();\n\n   useEffect(() => {\n      const fetch = async (id) => {\n         try {\n            setIsLoading(true)\n            const result = await API.getCast(id);\n            setCast(result.cast);\n            setIsLoading(false)\n            } catch (error) {\n               setError(true)   \n               console.error(error);\n            }\n      };\n      fetch(movieId);\n   }, [movieId]);\n\n   return(\n      <>\n         {isLoading ? ( <Loader/>   \n         ) : error  ? (\n            <h2>{ERROR_MSG['msg']}</h2>\n         ) : (\n            <section>\n               <h2>Cast</h2>\n               <ul>\n                  {!!cast.length ? (\n                     cast.map(({ original_name, profile_path, character }, idx) => (\n                        <li key={idx}>\n                           <img src={profile_path \n                           ?  `https://image.tmdb.org/t/p/w200${profile_path}`\n                           : 'https://via.placeholder.com/200x300?text=No+Image'} alt={original_name} />\n                           <h3>{original_name}</h3>\n                           <p>{character}</p>\n                        </li>\n                     ))\n                     ) : ( <p>Actors not found.</p>)}\n\n               </ul>\n            </section>\n         ) \n         }\n         \n \n\n  \n      </>\n   )\n};\n\nexport default Cast;\n\n//  {cast.length ? (\n//             <ul>  \n//                {cast.map(iCast => (\n//                   <li key={iCast.cast_id}>\n//                      {iCast.name}\n//                   </li>\n//                ))}\n//             </ul>\n//          ) : (\n//             <h1>Немає каст</h1>\n//          )} \n\n// {cast.map((cast) => (\n//    <li key={cast.id}>\n//       <img src={cast.profile_path} alt={cast.name} />\n//       <h3>{cast.name}</h3>\n//       <p>{cast.character}</p>\n//    </li>\n// ))}","export const ERROR_MSG = Object.freeze({\n   empty: 'This field is required and cannot be empty',\n   msg: 'Oops something going wrong! Try again later!',\n });\n "],"names":["API_KEY","axios","searchTrending","page","result","data","fetchMovieById","id","options","params","api_key","searchTitle","title","getReviews","getCast","useState","cast","setCast","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","fetch","API","console","ERROR_MSG","length","map","idx","original_name","profile_path","character","src","alt","Object","freeze","empty","msg"],"sourceRoot":""}